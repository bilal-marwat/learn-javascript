====================================================================
DIFFERENT BETWEEN PRIMITIVE AND REFRENCE DATA TYPE
====================================================================
Bilkul, yahan ek example diya gaya hai jo JavaScript mein primitive aur reference data types ke farq ko dikhata ha


1 == Primitive Data Type Example:


// Primitive data type (Number)
let x = 10;
let y = x; // y ko x ki value milti hai

console.log(x); // Output: 10
console.log(y); // Output: 10

y = 20; // y ki value badalne se x par koi asar nahi hota

console.log(x); // Output: 10
console.log(y); // Output: 20



Is example mein x ek primitive data type hai (number). Jab hum x ki value ko y mein assign karte hain, toh y ek copy of value le leta hai, aur y mein koi badlav x ko asar nahi karta.



3 ===  Reference Data Type Example:


// Reference data type (Object)
let obj1 = { name: 'John' };
let obj2 = obj1; // obj2 ko obj1 ke sath ek hi object ki reference milti hai

console.log(obj1.name); // Output: John
console.log(obj2.name); // Output: John

obj2.name = 'Doe'; // obj2 ke zariye agar object ko modify kiya jaye toh obj1 par bhi asar hota hai

console.log(obj1.name); // Output: Doe
console.log(obj2.name); // Output: Doe




Is example mein obj1 ek reference data type hai (object). Jab hum obj1 ko obj2 mein assign karte hain, toh dono variables ek hi object ki reference ko point karte hain. Agar ek variable (obj2) ke zariye object ko modify kiya jaye, toh dusre variable (obj1) par bhi wohi asar hota hai, kyunki dono ek hi object ki reference ko share karte hain.

Yeh farq samajhna JavaScript mein kaam karte waqt ahem hai, khaas kar jab aap objects aur arrays jaise complex data structures ke sath kaam kar rahe hote hain.
=================================================================================================






=================================Array clone using slice method===============================


Certainly! Slice method ka istemal karke array ko clone karna kaafi straightforward hai. Yeh method ek naya array banata hai, jo original array ke kuch ya saare elements ko contain karta hai. Niche ek simple example diya gaya hai:


=====================Example===================
// Original array
var originalArray = ['apple', 'banana', 'cherry', 'date'];

// Using slice to clone the array
var clonedArray = originalArray.slice();

// Modify the cloned array
clonedArray.push('elderberry');

// Output the original and cloned arrays
console.log("Original Array:", originalArray);
console.log("Cloned Array:", clonedArray);
===========================================


Is example mein:




originalArray mein ek array hai ['apple', 'banana', 'cherry', 'date'].
slice() method ka istemal karke clonedArray ko banaya gaya hai. Yeh naya array hai, jo original array ke saare elements ko contain karta hai.
clonedArray mein ek naya string 'elderberry' add kiya gaya hai.
Fir, original aur cloned arrays ko console par print kiya gaya hai.




=======================================================Output===============
Original Array: ['apple', 'banana', 'cherry', 'date']
Cloned Array: ['apple', 'banana', 'cherry', 'date', 'elderberry']
==================================================================
Isme dikhaya gaya hai ki originalArray ko modify karne par bhi clonedArray mein koi change nahi hua. Slice method ka istemal karke hamne original array ko clone kar liya hai.  

================================================================================================





=========================clone array use concat method=========================================

Bilkul, Array.concat method ka istemal karke bhi aap ek array ko clone kar sakte hain. Yeh method ek ya multiple arrays ko concatenate (combine) karke ek naya array banata hai. Niche diye gaye example mein, concat ka istemal ek array ko clone karne ke liye dikhaya gaya hai:


=====Example======
// Original array
var originalArray = [10, 20, 30, 40, 50];

// Using concat to clone the array
var clonedArray = [].concat(originalArray);

// Modify the cloned array
clonedArray.push(60);

// Output the original and cloned arrays
console.log("Original Array:", originalArray);
console.log("Cloned Array:", clonedArray);
===================


Is example mein:


originalArray mein ek array hai [10, 20, 30, 40, 50].
concat method ka istemal karke clonedArray ko banaya gaya hai. [] (empty array) ka use karte hain taki ek naya array ban sake, jo originalArray ke elements ko contain kare.
clonedArray mein ek naya number 60 add kiya gaya hai.
Fir, original aur cloned arrays ko console par print kiya gaya hai.



=======Output======
Original Array: [10, 20, 30, 40, 50]
Cloned Array: [10, 20, 30, 40, 50, 60]
==============


Jaise aap dekh sakte hain, originalArray ko modify karne par bhi clonedArray mein koi change nahi hua. concat method ka istemal bhi ek achha tarika hai array ko clone karne ka.

==============================================================================




====================================Array destructuring =================================


Array destructuring JavaScript mein ek feature hai jise aap arrays se values ko bahut asani se extract karke variables mein assign kar sakte hain. Yeh ek shorthand syntax hai jo aapko individual array elements ko access karne mein madad karta hai
=========================


========Example=======
let colors = ['Red', 'Green', 'Blue'];

let [firstColor, secondColor, thirdColor] = colors;

console.log(firstColor);  // Output: 'Red'
console.log(secondColor); // Output: 'Green'
console.log(thirdColor);  // Output: 'Blue'
============================
Is example mein, colors array se values firstColor, secondColor, aur thirdColor variables mein extract ki gayi hain.

Array destructuring flexible hota hai aur aapko specific elements ke alawa bhi values ko extract karne ka option deta hai. Aap extra commas ka istemal karke specific elements ke alawa baki ke elements ko ignore kar sakte hain.
=============================

==========Example========
let numbers = [1, 2, 3, 4, 5];

let [first, , third, , fifth] = numbers;

console.log(first);  // Output: 1
console.log(third);  // Output: 3
console.log(fifth);  // Output: 5
=========================
Is example mein, second aur fourth elements ko ignore kiya gaya hai. Array destructuring ka istemal functions ke return values ko unpack karne mein, swapping values, ya kisi complex data structure se values extract karne mein hota hai.




===========================================END ARRAY DISTRUCHTING==================== 





======================DIFFERENT BETWEEN SPREAD AND REST OPERATOR=========================


JavaScript mein spread operator (...) aur rest operator (...) dono hote hain, lekin inka istemal alag maqasid ke liye hota h


============Spread Operator (...)=====================
==========
=============
Spread operator ka istemal iterable (jaise ke array) ke elements ko phelane ke liye hota hai.

Aksar iska istemal array ya object ki shallow copy banane, arrays ko concatenate karne, ya kisi array/object mein tabdiliyan karke naya array/object banane ke liye hota hai.
===========

===== ========     Example with an array:
const array1 = [1, 2, 3];
const array2 = [...array1, 4, 5]; // Creates a new array [1, 2, 3, 4, 5]

=================  Example with an object:

const obj1 = { a: 1, b: 2 };
const obj2 = { ...obj1, c: 3 }; // Creates a new object { a: 1, b: 2, c: 3 }


===================Rest Operator (...):=================================
Rest operator ka istemal anek arguments ko ek array mein jama karne ke liye hota hai.

Aksar iska istemal function ke parameters mein sab bache hue arguments ko ek array mein collect karne ke liye hota hai.

===============Example
function sum(...numbers) {
  return numbers.reduce((total, num) => total + num, 0);
}

console.log(sum(1, 2, 3, 4)); // Outputs 10



Destructuring ke context mein, rest operator ko array ya object ke bache hue elements ko ek variable mein dalne ke liye bhi istemal kiya jata hai.

const [first, ...rest] = [1, 2, 3, 4]; // first = 1, rest = [2, 3, 4]


Mukhtasir taur par, jabke dono operators ka syntax ( ...) waisa hi hota hai, spread operator ko elements phelane, copies banane ya merge karne ke liye istemal kiya jata hai, jabke rest operator ko bache hue elements ko ek variable mein jama karne ke liye istemal kiya jata hai, aam taur par function parameters ya destructuring assignments mei

==================================================================================================






